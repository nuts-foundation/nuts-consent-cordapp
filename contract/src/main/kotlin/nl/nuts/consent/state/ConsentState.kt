/*
 *     Nuts consent cordapp
 *     Copyright (C) 2019 Nuts community
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 */

package nl.nuts.consent.state

import net.corda.core.contracts.LinearState
import net.corda.core.contracts.UniqueIdentifier
import net.corda.core.identity.Party
import net.corda.core.serialization.CordaSerializable

/**
 * State representing the actual consent records. All data is stored as attachments.
 * The externalId is created by the initiator and must be reproducible.
 *
 * @param externalId unique id generated by initiator
 * @param parties all involved parties
 */
@CordaSerializable
data class ConsentState(val consentStateUUID: UniqueIdentifier, val parties: Set<Party> = emptySet()) : LinearState {

    override val linearId: UniqueIdentifier get() = consentStateUUID
    override val participants: List<Party> get() = parties.toList()

    override fun toString() = consentStateUUID.toString()
}